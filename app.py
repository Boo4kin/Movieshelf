import streamlit as st
import pandas as pd
import pickle
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="üé¨ MovieShelf", layout="centered")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_movie_data(path="."):
    df_movies = pd.read_csv(os.path.join(path, "movies_metadata.csv"), low_memory=False)
    df_credits = pd.read_csv(os.path.join(path, "credits.csv"))
    df_keywords = pd.read_csv(os.path.join(path, "keywords.csv"))

    df_movies['id'] = pd.to_numeric(df_movies['id'], errors='coerce')
    df_credits['id'] = pd.to_numeric(df_credits['id'], errors='coerce')
    df_keywords['id'] = pd.to_numeric(df_keywords['id'], errors='coerce')

    df = df_movies.merge(df_credits, on='id').merge(df_keywords, on='id')
    df = df[['title', 'genres', 'keywords', 'crew', 'cast']]
    df = df.dropna(subset=['title'])
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    with open('movie_recommendation_model.pkl', 'rb') as file:
        vectorizer, count_matrix, df = pickle.load(file)
    cosine_sim = cosine_similarity(count_matrix, count_matrix)
    return vectorizer, cosine_sim, df

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def recommend(movie_title, df, cosine_sim):
    movie_title = movie_title.strip().lower()
    titles = df['title'].dropna().str.lower()

    if movie_title not in titles.values:
        return []

    idx = titles[titles == movie_title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:11]
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices].values

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
vectorizer, cosine_sim, df_model = load_model()
df_movies = load_movie_data()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ MovieShelf")

tab1, tab2, tab3 = st.tabs(["üè† –ì–ª–∞–≤–Ω–∞—è", "üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤", "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"])

with tab1:
    st.header("üè† –ì–ª–∞–≤–Ω–∞—è")
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MovieShelf!")
    st.markdown("–ò—â–∏—Ç–µ —Ñ–∏–ª—å–º—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")

with tab2:
    st.header("üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤")
    search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
    if search:
        results = df_movies[df_movies['title'].str.contains(search, case=False, na=False)].head(10)
        if not results.empty:
            st.write("–ù–∞–π–¥–µ–Ω–æ:")
            for title in results['title']:
                st.write(f"üéûÔ∏è {title}")
        else:
            st.warning("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

with tab3:
    st.header("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    movie_list = sorted(df_model['title'].dropna().unique())
    selected_movie = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º", movie_list)

    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recs = recommend(selected_movie, df_model, cosine_sim)
        if recs is None or len(recs) == 0:
            st.warning("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–ª—è –Ω–µ–≥–æ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö.")
        else:
            st.write("### –í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è:")
            for i, title in enumerate(recs, 1):
                st.write(f"{i}. {title}")
